getwd()
datos<-read.csv(file = "Files/Pasajeros.csv",header = T,sep = ",",encoding = "UTF-8")
View(datos)
class(datos)
head(datos)
names(datos)
glimpse(datos)
install.packages("dplyr")
library(dplyr)
glimpse(datos)
str(datos)
dim(datos)
colnames(datos)
rownames(datos)
colnames(datos)<-c
colnames(datos)<-c("aeropuerto","mes","anio","nacionales","extranjeros","transito","exentos","total")
# cambiar el nombre a una sola columna
names(datos)[1]<-"aeropuerto"
colnames(datos)<-c("aeropuerto","mes","anio","nacionales","extranjeros","transito","exentos","total")
# cambiar el nombre a una sola columna
names(datos)[1]<-"aeropuerto"
colnames(datos)<-c("aeropuerto","mes","anio","nacionales","extranjeros","transito","exentos","total")
# cambiar el nombre a una sola columna
names(datos)[1]<-"aeropuerto"
unique(datos$aeropuerto)
datos$aeropuerto<-str_trim(str_replace(datos$aeropuerto,"Aeropuerto Internacional",""))
library(stringr)
datos$aeropuerto<-str_trim(str_replace(datos$aeropuerto,"Aeropuerto Internacional",""))
unique(datos$aeropuerto)
datos[1,c(1,3,5)]
datos[,]
datos[c(2,4,5),3:7]
datos %>% select("mes","anio")
datos$anio
datos$mes<- as.factor(datos$mes)
datos$anio
datos$mes<- as.factor(datos$mes)
datos$fecha<-as.Date(datos$fecha)
prueba<-datos %>% select("mes","anio")
datos %>% select("mes","anio")
prueba<-datos %>% select("mes","anio")
datos$anio
datos$mes<- as.factor(datos$mes)
datos$fecha<-as.Date(datos$fecha)
#crear o modificar columnas de un dataframe
datos<-datos %>%  mutate(sdnacionales=sqrt(nacionales) )
View(datos)
View(prueba)
datos_aeropuerto<-datos %>% select(aeropuerto,nacionales)
View(datos_aeropuerto)
is.na(datos)        # Vector lógico con T==NA
any(is.na(datos))   # TRUE = hay al menos un valor NA
anyNA(datos)        # Alternativa a lo anterior
which(is.na(datos)) # Indica las coordenadas donde están los NA
mean(is.na(datos))  # Porcentaje de valores NA
sum(is.na(datos))   # Cantidad de valores perdidos en el vector
table(datos$nacionales, useNA = "always")
sum(is.na(datos)) / length(datos) #proporción de valores faltantes
apply(is.na(datos), 2, mean)   # Porcentaje de NA por columna
apply(is.na(datos), 2, sum)    # Cantidad de NA por columna
apply(is.na(datos), 2, which)  # Posición de NA por columna
sapply(datos, function(x) sum(is.na(x)))
heatmaply::heatmaply_na(datos) # ver los na de forma grafica
install.packages("heatmaply")
library(heatmaply)
mifuncion<-function(valor1,valor2) {
resultado = valor1+valor2
return( resultado)
}
valores <-mifuncion(2,4)
plot(datos$nacionales)
ggplot(datos, aes(anio,nacionales)) +
#geom_hex() +
geom_jitter(width =.3, alpha = 0.5) +
labs(title="Diagrama de dispersión",
subtitle= "ScatterPlot",
caption="Fuente: CPS1985 (paquete AER)",
x="Años",
y="Cantidad de nacionales") +
scale_fill_continuous("Pasajeros nacionales") +
theme_classic()
hist(datos$nacionales, main = "Histograma de las ventas",
xlab = "pasajeros", ylab = "Frecuencia",
col = "purple")
boxplot(datos$nacionales,boxwex=0.8)
unique(datos$aeropuerto)
boxplot(datos$anio,boxwex=0.8)
library(dplyr)
nacionales_ae1<-datos %>% filter(aeropuerto=="Limón" )
boxplot(nacionales ~ anio,
col = rainbow(ncol(nacionales_ae1)),
data = nacionales_ae1,
boxwex=0.8,
main = "Nacionales por mes",
scale_y_continuous(labels=scales::comma)
)
stripchart(data=datos,nacionales ~ anio,vertical = TRUE,
method = "jitter",pch=19,add = TRUE,
col = 1:12
)
ggplot(datos, aes(x =aeropuerto , y = nacionales, fill = aeropuerto) ) +
geom_boxplot(alpha = 0.3, outlier.colour = "blue") +
labs(x = "Nacionales", y = "Pasajeros") +
guides(fill = FALSE) +
coord_flip() +
geom_point(stat =  "summary", fun.y = mean, shape = 16, size = 4, color = "red") +
geom_point(position = position_jitter(width = 0.1), alpha = 0.2)
conjunto <-datos %>% filter(datos$aeropuerto=="Daniel Oduber Quirós")
unique(datos$aeropuerto)
atipicos(conjunto,conjunto$aeropuerto,conjunto$extranjeros)
hist(valores, prob = TRUE,
main = "Histograma con curva normal", ylab = "Densidad", col="ivory")
options(scipen = 99999)
x <- seq(min(valores), max(valores), length = length(valores))
f <- dnorm(x, mean = mean(valores), sd = sd(valores))
lines(x, f, col = "red", lwd = 2)
lines(density(valores), lwd = 2, col = 'blue')
legend("topright", c("Histograma", "Densidad", "Normal"), box.lty = 0,
lty = 1, col = c("black", "blue", "red"), lwd = c(1, 2, 2))
par(new = TRUE)
boxplot(valores, horizontal = TRUE, axes = FALSE,
lwd = 2, col = rgb(0, 1, 1, alpha = 0.15))
grupos<- datos %>% group_by(aeropuerto) %>%
summarise(totales=sum(total))
grupos
unique(datos$aeropuerto)
ggplot(grupos,aes(x=aeropuerto,y=totales,fill=aeropuerto))+
geom_bar(stat="identity")+
geom_text(aes(label = format(totales, big.mark= ".", trim = TRUE)),
position = "dodge",vjust = 0,fontface = "bold",size=5,color="blue"
)+
ggtitle("Grafico de pasajeros por aeropuerto")+
xlab("Aeropuertos") +
ylab("Totales") +
scale_y_continuous(labels=scales::comma)+
scale_fill_brewer(palette = "Set1") +
theme(legend.position="none")+
coord_flip()+
theme(legend.position = "none")
conjunto <-datos %>% filter(datos$aeropuerto=="Daniel Oduber Quirós")
valores<-datos$nacionales
valores<-na.omit(valores)
hist(valores, prob = TRUE,
main = "Histograma con curva normal", ylab = "Densidad", col="ivory")
atipicos(conjunto,conjunto$aeropuerto,conjunto$extranjeros)
atipicos(conjunto,conjunto$aeropuerto,conjunto$extranjeros)
conjunto <-datos %>% filter(datos$aeropuerto=="Daniel Oduber Quirós")
atipicos(conjunto,conjunto$aeropuerto,conjunto$extranjeros)
valores<-datos$nacionales
valores<-na.omit(valores)
atipicos<-function(df,valorx,valory){
grafico <- ggplot(df, aes(x =valorx , y = valory, fill = valorx) ) +
geom_boxplot(alpha = 0.3, outlier.colour = "blue") +
labs(x = "Nacionales", y = "Pasajeros") +
guides(fill = FALSE) +
coord_flip() +
geom_point(stat =  "summary", fun.y = mean, shape = 16, size = 4, color = "red") +
geom_point(position = position_jitter(width = 0.1), alpha = 0.2)
return(grafico)
}
conjunto <-datos %>% filter(datos$aeropuerto=="Daniel Oduber Quirós")
unique(datos$aeropuerto)
atipicos(conjunto,conjunto$aeropuerto,conjunto$extranjeros)
hist(valores, prob = TRUE,
main = "Histograma con curva normal", ylab = "Densidad", col="ivory")
x <- seq(min(valores), max(valores), length = length(valores))
f <- dnorm(x, mean = mean(valores), sd = sd(valores))
lines(x, f, col = "red", lwd = 2)
lines(density(valores), lwd = 2, col = 'blue')
legend("topright", c("Histograma", "Densidad", "Normal"), box.lty = 0,
lty = 1, col = c("black", "blue", "red"), lwd = c(1, 2, 2))
par(new = TRUE)
boxplot(valores, horizontal = TRUE, axes = FALSE,
lwd = 2, col = rgb(0, 1, 1, alpha = 0.15))
grupos<- datos %>% group_by(aeropuerto) %>%
summarise(totales=sum(total))
grupos
unique(datos$aeropuerto)
ggplot(grupos,aes(x=aeropuerto,y=totales,fill=aeropuerto))+
geom_bar(stat="identity")+
geom_text(aes(label = format(totales, big.mark= ".", trim = TRUE)),
position = "dodge",vjust = 0,fontface = "bold",size=5,color="blue"
)+
ggtitle("Grafico de pasajeros por aeropuerto")+
xlab("Aeropuertos") +
ylab("Totales") +
scale_y_continuous(labels=scales::comma)+
scale_fill_brewer(palette = "Set1") +
theme(legend.position="none")+
coord_flip()+
theme(legend.position = "none")
## El histograma
hist(datos$nacionales)
## El boxplot
boxplot(datos$nacionales)
grupo01<-datos %>% filter(aeropuerto=="Juan Santamaría")
ggplot(grupo01, aes(aeropuerto, nacionales)) +
geom_boxplot(notch = TRUE,fill = "white", colour = "#3366FF")
library(RODBC)
con.SqlServer <-odbcConnect("ODBC_SQL",uid = "sa",pwd = "Admin12345")
facturas<-query.employees.sqlserver<-sqlQuery(con.SqlServer,"select *  from invoices")
View(facturas)
# model.R
library(RODBC)
library(dplyr)
# Conectar a la base de datos Northwind
con.SqlServer <- odbcConnect("ODBC_SQL", uid = "sa", pwd = "Admin12345")
# Extraer datos de las tablas Orders, OrderDetails y Products
orders <- sqlQuery(con.SqlServer, "SELECT OrderID, ShipCountry FROM Orders")
order_details <- sqlQuery(con.SqlServer, "SELECT OrderID, ProductID, UnitPrice, Quantity FROM [Order Details]")
products <- sqlQuery(con.SqlServer, "SELECT ProductID, ProductName FROM Products")
# Combinar las tablas
sales_data <- order_details %>%
inner_join(orders, by = "OrderID") %>%
inner_join(products, by = "ProductID") %>%
mutate(TotalSales = UnitPrice * Quantity)
# Cerrar la conexión
odbcClose(con.SqlServer)
# Exportar el dataframe para usarlo en server.R
save(sales_data, file = "sales_data.RData")
shiny::runApp('Laboratorio')
runApp('Laboratorio')
library(rvest)
library("rvest")
install.packages("rvest")
library("rvest")
library("dplyr")
library("stringr")
rm(list = ls())
cat("\014")
options(encoding = "utf-8")
cars <- data.frame(name = character(), price = character(),atributes = character(),location = character(), stringsAsFactors = FALSE)
link = "https://autos.mercadolibre.co.cr/autos-camionetas/"
page = read_html(link)
name=page %>% html_nodes(".poly-component__title") %>% html_text() %>% trimws()
price=page %>% html_nodes(".poly-component__price") %>% html_text() %>% trimws()
year=page %>% html_nodes(".poly-component__attributes-list") %>% html_text() %>% trimws()
year=substr(year, 1, 4)
kilometers=page %>% html_nodes(".poly-component__attributes-list") %>% html_text() %>% trimws() %>% gsub("Km", "", .)
kilometers=substr(kilometers, 5, nchar(kilometers))%>% trimws()
location=page %>% html_nodes(".poly-component__location") %>% html_text() %>% trimws()
cars = data.frame(name,price,year,kilometers,location, stringsAsFactors = FALSE)
cars <- cars %>% mutate(currency = ifelse(grepl("\\$", price), "dolares", "colones"))
cars$price <-gsub("[₡$,US]", "", cars$price)
cars$price<-as.double(cars$price)
View(cars)
View(cars)
View(cars)
cars <- cars %>% separate(location, into = c("city", "province"), sep = " - ", fill = "right", extra = "merge")
View(cars)
View(cars)
library(tidyr)
library(dplyr)  # Asegura que dplyr esté cargado
# Separar la columna location en city y province
cars <- cars %>% separate(location, into = c("city", "province"), sep = " - ", fill = "right", extra = "merge")
View(cars)
colnames(cars)<.c("marca","precio","annio","kilometros","canto","provincia","moneda")
colnames(cars)<-c("marca","precio","annio","kilometros","canto","provincia","moneda")
vehiculos_provincia<-cars %>% group_by(provincia) %>%
summarise(cantidad=n())
vehiculos_provincia
# Definir el número de elementos por página
items_per_page <- 10
total_rows <- nrow(cars)
total_pages <- ceiling(total_rows / items_per_page)
# Función para obtener datos de una página específica
get_page <- function(page_number) {
start_row <- (page_number - 1) * items_per_page + 1
end_row <- min(start_row + items_per_page - 1, total_rows)
cars %>% slice(start_row:end_row)
}
# Ejemplo: Obtener la primera página
page_1 <- get_page(1)
View(page_1)
View(page_2)
library(RSelenium)
library("RSelenium")
# instalacion de las librerias
install.packages("RSelenium")
library("wdman")
library("netstat")
# instalacion de las librerias
install.packages("netstat")
library("netstat")
library("rvest")
library("dplyr")
library("stringr")
library("ggplot2")
library("tidyr")
selenium()
selenium()
#inicializar
selenium_object<-selenium(retcommand = T,check = F)
# configuracion con chrome
binman::list_versions("chromedriver")
remote_driver <-rsDriver(browser="chrome",
chromever="122.0.6261.94",
verbose=F,
port=free_port())
library("rvest")
library("dplyr")
library("stringr")
library("tidyr")
rm(list = ls())
cat("\014")
options(encoding = "utf-8")
# Definir el número de páginas que deseas scrapear
num_paginas <- 3  # Cambia este valor según necesites
# Crear un dataframe vacío para almacenar los datos
cars <- data.frame(name = character(), price = character(), year = character(),
kilometers = character(), location = character(), stringsAsFactors = FALSE)
# Loop para iterar sobre múltiples páginas
for (pagina in 1:num_paginas) {
link <- paste0("https://autos.mercadolibre.co.cr/autos-camionetas/_Desde_", (pagina - 1) * 48 + 1)
page <- read_html(link)
name <- page %>% html_nodes(".poly-component__title") %>% html_text() %>% trimws()
price <- page %>% html_nodes(".poly-component__price") %>% html_text() %>% trimws()
year <- page %>% html_nodes(".poly-component__attributes-list") %>% html_text() %>% trimws()
year <- substr(year, 1, 4)
kilometers <- page %>% html_nodes(".poly-component__attributes-list") %>% html_text() %>% trimws() %>% gsub("Km", "", .)
kilometers <- substr(kilometers, 5, nchar(kilometers)) %>% trimws()
location <- page %>% html_nodes(".poly-component__location") %>% html_text() %>% trimws()
# Crear dataframe temporal
cars_temp <- data.frame(name, price, year, kilometers, location, stringsAsFactors = FALSE)
# Agregar datos al dataframe principal
cars <- rbind(cars, cars_temp)
}
# Agregar columna de moneda
cars <- cars %>% mutate(currency = ifelse(grepl("\\$", price), "dolares", "colones"))
# Limpiar precio
cars$price <- gsub("[₡$,US]", "", cars$price)
cars$price <- as.double(cars$price)
# Separar la ubicación en ciudad y provincia
cars <- cars %>% separate(location, into = c("city", "province"), sep = " - ", fill = "right", extra = "merge")
# Renombrar columnas
colnames(cars) <- c("marca", "precio", "annio", "kilometros", "ciudad", "provincia", "moneda")
# Agrupar por provincia
vehiculos_provincia <- cars %>% group_by(provincia) %>%
summarise(cantidad = n())
# Mostrar el dataframe
View(cars)
pwd
#Ejemplo practivo 1 - Arina y Gasolina
prices <- read.csv("files/prices.csv")
head(prices)
View(prices)
# los datos son desde 1980 y son mensuales
prices.ts <- ts(prices, start = c(1980,1),
frequency = 12)
prices.ts
plot(prices.ts,type="o" ,col = 1:2)
#poner todo en un solo panel plot.type = "single" y los colones
plot(prices.ts, plot.type = "single", col = 1:2, type="o")
# agregar las leyendas para saber cual es cual
legend("topleft", colnames(prices.ts), col = 1:2, lty = 1)
#Descomposición de una serie temporal
#stl
#La descomposición de una serie temporal ayuda a identificar patrones y tendencias en la serie temporal y a predecir su comportamiento futuro.
# Aplicamos log para eliminar las variaciones irreglulares del la serie
flour.l <- log(prices.ts[,1])
#stl = Seasonal Decomposition of Time Series by Loess
flour.stl<- stl(flour.l, s.window = "period")
plot(flour.stl)
flour.stl
gas.l <- log(prices.ts[,2])
gas.stl <- stl(gas.l, s.window = "period")
plot(gas.stl)
flour.dec <- decompose(flour.l)
plot(flour.dec)
ts_decompose(flour.l,type = "both")
gas.dec <- decompose(gas.l)
plot(gas.dec)
gas.season.adjusted <- prices.ts[,2] - (gas.dec$seasonal)
plot(gas.season.adjusted)
# periodo de muestreo
n <- 6
# sides =2 es bilateral sides=1 es unilateral filtra los 6 anteriores
# 2 es 7  hace promedios 3 atras y 3 adelantes para localizar mejor
# las tendencias
# los pesos se hace con  rep(1/n, n)
#prices.ts[,2] es la gasolina prices.ts[,1] es la arina
gas.f.1 <- filter(prices.ts[,2], filter = rep(1/n, n), sides = 2)
gas.f.2 <- filter(prices.ts[,2], filter = rep(1/n,n), sides = 1)
plot(prices.ts[,2],lwd = 3) # esta es la gasolina
lines(gas.f.1, col = "blue", lwd = 3)
lines(gas.f.2, col = "red", lwd = 3)
library(forecast)
head(prices.ts)
hw.model <- hw(prices.ts[, 2])
end(prices.ts)
hw.forecast <- forecast(hw.model, h = 12)
# Graficar la serie de tiempo, los datos ajustados y los pronósticos
plot(hw.model, main = "Holt-Winters Forecast for Gasoline Prices")
lines(hw.forecast$mean, col = "red")
#ver las predicciones
hw.forecast
# Accede a los pronósticos
pronosticos <- hw.forecast$mean
# Accede a los pronósticos
pronosticos <- hw.forecast$mean
library(readxl)
library(dplyr)
library(timeSeries)
library(forecast)
datos <- read_excel("Files/ventas.xlsx",sheet =1 , col_names = T)
View(datos)
s<- ts(datos$CIERE, start = c(1986,1),frequency = 12)
s.ts <- ts(s)
class(s.ts)
class(s.ts)
head(s.ts)
plot(s.ts)
s.ts.a <- ts(s, start = 2001)
s.ts.a
plot(s.ts.a)
s.ts.m <- ts(s, start = c(2001,1), frequency = 12)
s.ts.m
plot(s.ts.m)
s.ts.q <- ts(s, start = 2001, frequency = 4)
s.ts.q
plot(s.ts.q)
start(s.ts.m)
end(s.ts.m)
frequency(s.ts.m)
start(s.ts.q)
end(s.ts.q)
frequency(s.ts.q)
datos <- read_excel("Files/ventas.xlsx",sheet =1 , col_names = T)
View(datos)
datos
datos.ts<- ts(datos$CIERE, start = c(1986,1),frequency = 12)
plot(datos.ts,type="o")
datos.l <- log(datos.ts)
datos.stl<- stl(datos.ts, s.window = "period")
plot(datos.stl)
datos.hw <- HoltWinters(datos.l)
plot(datos.hw, col = "blue",  col.predicted = "red", type = "l", lwd = 3)
datos.fore <- forecast(datos.hw, h=12)
plot(datos.fore, type = "l", lwd = 3)
plot(datos.fore, type = "l", lwd = 3, xlim = c(1986, 2025))
title(main = "Predicción con Holt-Winters", xlab = "Año", ylab = "Valor")
predicciones<-as.data.frame(datos.fore)
View(predicciones)
end(datos.ts)
# Ajusta el modelo Holt-Winters hasta 2018 para ver como funcna con los otros datos
hw.model <- HoltWinters(window(datos.ts, end = c(2016, 12)))
# Predice los valores para los dos años
hw.forecast <- forecast(hw.model, h = 48)
# Lee los datos reales de los últimos 2 años para esta prueba
real_data_last_years <- window(datos.ts, start = c(2017, 1), end = c(2020, 12))
# Grafica las predicciones y los datos reales
plot(real_data_last_years, col = "blue", type = "o", lwd = 3, main = "Holt-Winters Forecast vs datos reales")
lines(hw.forecast$mean, col = "red",lwd = 3)
# Calcula el error de predicción
errors <- real_data_last_years - hw.forecast$mean
mean_absolute_error <- mean(abs(errors))
mean_squared_error <- mean(errors^2)
